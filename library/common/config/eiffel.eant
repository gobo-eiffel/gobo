<?xml version="1.0"?>

<project name="eiffel" default="help">

	<description>
		description: "Eiffel compilation"
		copyright: "Copyright (c) 2001-2024, Eric Bezault and others"
		license: "MIT License"
	</description>

	<inherit>
		<parent location="basic.eant">
			<redefine target="help"/>
			<redefine target="install"/>
			<redefine target="clean"/>
			<redefine target="clobber"/>
			<redefine target="init"/>
		</parent>
		<parent location="ecf.eant"/>
	</inherit>

	<target name="help">
		<echo message="usage:"/>
		<echo message="   geant install"/>
		<echo message="   geant compile"/>
		<echo message="   geant compile_ge"/>
		<echo message="   geant compile_ise"/>
		<echo message="   geant compile_debug"/>
		<echo message="   geant compile_debug_ge"/>
		<echo message="   geant compile_debug_ise"/>
		<echo message="   geant clean"/>
		<echo message="   geant clobber"/>
	</target>

	<target name="install" depend="init">
		<description>
			Install ${system} directory.
		</description>

		<geant target="update_all_ecf"/>
		<geant target="other_install"/>
	</target>

	<target name="compile" depend="prepare_compile">
		<description>
			Compile '${system}'.
			Use Eiffel compiler set in ${GOBO_EIFFEL}
			or 'ge' if this variable is not defined.
			Compile in debug mode if ${debug} is defined.
		</description>

		<geant target="compile_${eiffel}"/>
	</target>

	<target name="compile_ge" depend="prepare_compile">
		<description>
			Compile '${system}' with Gobo Eiffel.
			Compile in debug mode if ${debug} is defined.
		</description>

		<set name="ecf_filename" value="compile_ge.ecf"/>
		<delete file="${ecf_filename}"/>
		<set name="eiffel" value="ge"/>
		<copy file="${system_dir}/system.ecf" to_file="${ecf_filename}"/>
		<geant target="adapt_ecf">
			<argument name="a_ecf_filename" value="${ecf_filename}"/>
			<argument name="a_library_root" value="${system_dir}"/>
		</geant>
		<delete file="${system}${exe}"/>
		<set name="gec_executable" value="gec"/>
		<set name="gec_executable" value="${GEC_EXECUTABLE}" if="${GEC_EXECUTABLE}"/>
		<set name="finalize" value="true"/>
		<set name="finalize" value="false" if="${debug}"/>
		<set name="split" value="true"/>
		<set name="split" value="false" if="${no_split}"/>
		<set name="split_size_option" value=""/>
		<set name="split_size_option" value="${split_size}" if="${split_size}"/>
		<set name="gelint_option" value="false" unless="${gelint_option}"/>
		<set name="thread_count_option" value=""/>
		<set name="thread_count_option" value="${thread_count}" if="${thread_count}"/>
		<gec ecf="${ecf_filename}" executable="${gec_executable}" target="${system}" finalize="${finalize}" gelint="${gelint_option}" c_compile="no" catcall="error" split="${split}" split_size="${split_size_option}" thread="${thread_count_option}"/>
		<set name="c_script" value="${system}.bat" if="${GOBO_OS}=windows"/>
		<set name="c_script" value="${system}.sh" unless="${GOBO_OS}=windows"/>
		<gecc script="${c_script}" thread="${thread_count_option}"/>
	</target>

	<target name="compile_ise" depend="prepare_compile">
		<description>
			Compile '${system}' with ISE Eiffel.
			Compile in debug mode if ${debug} is defined.
		</description>

		<set name="ecf_filename" value="compile_ise.ecf"/>
		<delete file="${ecf_filename}"/>
		<set name="eiffel" value="ise"/>
		<setenv name="GOBO_EIFFEL" value="ise"/>
		<copy file="${system_dir}/system.ecf" to_file="${ecf_filename}"/>
		<geant target="adapt_ecf">
			<argument name="a_ecf_filename" value="${ecf_filename}"/>
			<argument name="a_library_root" value="${system_dir}"/>
		</geant>
		<delete file="${system}${exe}"/>
		<delete file="${system}.melted"/>
		<delete file="lib${system}.dll"/>
		<delete>
			<fileset include="?(${system}_)module_*.dll"/>
		</delete>
		<set name="ec_executable" value="ec"/>
		<set name="ec_executable" value="${EC_EXECUTABLE}" if="${EC_EXECUTABLE}"/>
		<set name="finalize" value="true"/>
		<set name="finalize" value="false" if="${debug}"/>
		<set name="compatible" value="false"/>
		<set name="compatible" value="true" if="${GOBO_COMPATIBLE}"/>
		<set name="project_path" value="${GOBO_BUILD_PREFIX}" if="${GOBO_BUILD_PREFIX}"/>
		<set name="project_path" value="" unless="${GOBO_BUILD_PREFIX}"/>
		<ise ecf="${ecf_filename}" executable="${ec_executable}" system="${system}" target="${system}" finalize="${finalize}" compatible="${compatible}" finish_freezing="true" project_path="${project_path}"/>
		<set name="codedir" value="W_code" if="${finalize}=false"/>
		<set name="codedir" value="F_code" if="${finalize}=true"/>
		<set name="compilation_directory" value="EIFGENs" unless="${GOBO_BUILD_PREFIX}"/>
		<set name="compilation_directory" value="${GOBO_BUILD_PREFIX}/EIFGENs" if="${GOBO_BUILD_PREFIX}"/>
		<set name="prefix" value="${compilation_directory}/${system}/${codedir}"/>
		<available resource="${prefix}/${system}${exe}" variable="file_available_for_move" unless="${GOBO_BUILD_PREFIX}"/>
		<available resource="${prefix}/${system}${exe}" variable="file_available_for_copy" if="${GOBO_BUILD_PREFIX}"/>
			<!-- If compilation directory is specified, might not be part of the system file system, so we copy instead. -->
		<move file="${prefix}/${system}${exe}" to_directory="." if="${file_available_for_move}=true"/>
			<!-- Problem: we copy if we think we cannot move, but that means the executable bit gets reset. No solution for this yet. -->
		<copy file="${prefix}/${system}${exe}" to_directory="." if="${file_available_for_copy}=true" force="false"/>
		<available resource="${prefix}/lib${system}.dll" variable="file_available"/>
		<copy file="${prefix}/lib${system}.dll" to_directory="." if="${file_available}=true"/>
		<available resource="${prefix}/${system}.melted" variable="file_available"/>
		<copy file="${prefix}/${system}.melted" to_directory="." if="${file_available}=true"/>
		<copy to_directory=".">
			<fileset include="${prefix}/?(${system}_)module_*.dll">
				<map type="flat"/>
			</fileset>
		</copy>
		<copy to_directory=".">
			<fileset include="${prefix}/Assemblies/*.@(dll|exe)">
				<map type="flat"/>
			</fileset>
		</copy>
	</target>

	<target name="compile_debug" depend="prepare_compile">
		<description>
			Compile '${system}' in debug mode.
			Use Eiffel compiler set in ${GOBO_EIFFEL}
			or 'ge' if this variable is not defined.
		</description>

		<set name="debug" value="true"/>
		<geant target="compile"/>
	</target>

	<target name="compile_debug_ge" depend="prepare_compile">
		<description>
			Compile '${system}' with Gobo Eiffel in debug mode.
		</description>

		<set name="eiffel" value="ge"/>
		<set name="debug" value="true"/>
		<geant target="compile"/>
	</target>

	<target name="compile_debug_ise" depend="prepare_compile">
		<description>
			Compile '${system}' with ISE Eiffel in debug mode.
		</description>

		<set name="eiffel" value="ise"/>
		<set name="debug" value="true"/>
		<geant target="compile"/>
	</target>

	<target name="clean" depend="init">
		<description>
			Remove intermediary generated files.
		</description>

		<set name="project_path" value="${GOBO_BUILD_PREFIX}" if="${GOBO_BUILD_PREFIX}"/>
		<set name="project_path" value="" unless="${GOBO_BUILD_PREFIX}"/>
		<gec clean="${system}"/>
		<ise clean="${system}" project_path="${project_path}"/>
		<delete file="compile_ge.ecf"/>
		<delete file="compile_ise.ecf"/>
		<delete>
			<fileset include="vc*.pdb"/>
		</delete>
		<geant target="other_clean"/>
	</target>

	<target name="clobber" depend="init">
		<description>
			Remove all generated files.
		</description>

		<geant target="clean"/>
		<delete file="${system}${exe}"/>
		<delete file="${system}.melted"/>
		<delete file="lib${system}.dll"/>
		<delete>
			<fileset include="?(${system}_)module_*.dll"/>
		</delete>
		<delete file="EiffelSoftware.Runtime.dll"/>
		<geant target="other_clobber"/>
	</target>

<!-- Implementation -->

	<target name="prepare_compile" depend="init" export="NONE">
		<description>
			Prepare compilation if necessary.
		</description>

		<!-- To be redefined in descendant if necessary -->
	</target>

	<target name="other_install" depend="init" export="NONE">
		<description>
			Install other items in ${system} directory.
		</description>

		<!-- To be redefined in descendant if necessary -->
	</target>

	<target name="other_clean" depend="init" export="NONE">
		<description>
			Remove other intermediary generated files.
		</description>

		<!-- To be redefined in descendant if necessary -->
	</target>

	<target name="other_clobber" depend="init" export="NONE">
		<description>
			Remove other generated files.
		</description>

		<!-- To be redefined in descendant if necessary -->
	</target>

	<target name="init" export="NONE">
		<set name="eiffel" value="ge"/>
		<geant target="init_eiffel"/>
		<geant target="init_os"/>
		<geant target="init_system"/>
	</target>

	<target name="init_system" export="NONE">
		<!--
			Values to be defined:
				. ${system} : name of the system to be compiled
				. ${system_dir} : directory for the compilation
		-->
	</target>

	<target name="init_eiffel" if="${GOBO_EIFFEL}" export="NONE">
		<set name="eiffel" value="${GOBO_EIFFEL}"/>
	</target>

	<target name="init_os" export="NONE">
		<geant target="init_windows"/>
		<geant target="init_unix"/>
	</target>

	<target name="init_windows" if="${GOBO_OS}=windows" export="NONE">
		<!-- No special windows tasks needed for now but target is kept for possible future instructions -->
	</target>

	<target name="init_unix" unless="${GOBO_OS}=windows" export="NONE">
		<!-- No special unix tasks needed for now but target is kept for possible future instructions -->
	</target>

</project>
